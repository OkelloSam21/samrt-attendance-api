openapi: 3.0.0
info:
  title: Smart attendance api
  description: APi for managing educational resources inclucding users, course-assignments and attendance
  version: 0.0.1

servers:
  - url: http://localhost:8080
    description: Default server

paths:
  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login a user and generate access and refresh tokens
      description: >
        Performs authentication for a user with the provided email and password.  
        Upon success, generates and returns a pair of tokens: access token and refresh token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: User's email address
                  example: user@example.com
                password:
                  type: string
                  format: password
                  description: User's password
                  example: "mypassword123"
      responses:
        "200":
          description: Access and refresh tokens generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    description: The JWT access token for authenticating further requests
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhbGciOiJIUzIx...
                  refreshToken:
                    type: string
                    description: The JWT refresh token for generating new access tokens
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2OTM0...
        "401":
          description: Unauthorized - Invalid credentials (email or password)
          content:
            application/json:
              schema:
                type: string
                example: Invalid email or password

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh access and refresh tokens
      description: >
        Exchanges a valid refresh token for a new set of access and refresh tokens.  
        The refresh token must still be valid.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  description: The JWT refresh token
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsdWlkIjoiMTIz...
      responses:
        "200":
          description: New access and refresh tokens generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    description: The new JWT access token
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhbGciOiJIUzIx...
                  refreshToken:
                    type: string
                    description: The new JWT refresh token
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2OTM1...
        "401":
          description: Unauthorized - Invalid or expired refresh token
          content:
            application/json:
              schema:
                type: string
                example: Invalid refresh token


components:
  
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the user
          example: 1
        name:
          type: string
          description: Full name of the user
          example: John Doe
        email:
          type: string
          format: email
          description: Email address of the user
          example: user@example.com
        role:
          type: string
          description: Role of the user in the system (e.g., admin, student, teacher)
          example: student
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the user was created
          example: "2023-10-05T14:48:00.000Z"
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the user was last updated
          example: "2023-10-10T14:48:00.000Z"

security:


externalDocs:
tags:
  -

