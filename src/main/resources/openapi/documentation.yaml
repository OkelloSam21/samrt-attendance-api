openapi: 3.0.0
info:
  title: Education Management API
  description: API for managing educational resources including users, courses, assignments, and attendance
  version: 0.0.1

servers:
  - url: http://localhost:8080
    description: Default server

paths:
  /users/login:
    post:
      summary: User login
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  userId:
                    type: string
                    format: uuid
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/signup:
    post:
      summary: User registration
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                role:
                  type: string
                  enum: [ADMIN, LECTURER, STUDENT]
                  default: STUDENT
      responses:
        '200':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  userId:
                    type: string
                    format: uuid
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users:
    get:
      summary: Get all users
      description: Retrieves a list of all users (Admin only)
      parameters:
        - name: admin_id
          in: query
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{id}:
    get:
      summary: Get user details
      description: Retrieves details of a specific user (Admin or user themselves)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: requester_id
          in: query
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update user
      description: Updates user details (Admin or user themselves)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: requester_id
          in: query
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
                - role
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                role:
                  type: string
                  enum: [ADMIN, LECTURER, STUDENT]
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete user
      description: Deletes a user (Admin only)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: admin_id
          in: query
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /courses:
    post:
      summary: Create a course
      description: Creates a new course (Lecturer and Admin only)
      parameters:
        - name: requester_id
          in: query
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                lecturer_id:
                  type: string
                  format: uuid
      responses:
        '200':
          description: Course created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  courseId:
                    type: string
                    format: uuid
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      summary: Get all courses
      description: Retrieves a list of all courses
      parameters:
        - name: requester_id
          in: query
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of courses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Course'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /courses/{id}:
    get:
      summary: Get course details
      description: Retrieves details of a specific course
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: requester_id
          in: query
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Course details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update course
      description: Updates course details (Lecturer who owns the course and Admin only)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: requester_id
          in: query
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                lecturer_id:
                  type: string
                  format: uuid
      responses:
        '200':
          description: Course updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete course
      description: Deletes a course (Admin only)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: requester_id
          in: query
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Course deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /assignments:
    post:
      summary: Create an assignment
      description: Creates a new assignment (Lecturer only)
      parameters:
        - name: requester_id
          in: query
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - course_id
                - title
                - description
                - due_date
              properties:
                course_id:
                  type: string
                  format: uuid
                title:
                  type: string
                description:
                  type: string
                due_date:
                  type: string
                  format: date-time
      responses:
        '200':
          description: Assignment created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  assignmentId:
                    type: string
                    format: uuid
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      summary: Get all assignments
      description: Retrieves a list of all assignments
      responses:
        '200':
          description: List of assignments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Assignment'

  /assignments/{id}:
    get:
      summary: Get assignment details
      description: Retrieves details of a specific assignment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Assignment details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Assignment'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update assignment
      description: Updates assignment details (Lecturer only)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: requester_id
          in: query
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                due_date:
                  type: string
                  format: date-time
      responses:
        '200':
          description: Assignment updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete assignment
      description: Deletes an assignment (Lecturer only)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: requester_id
          in: query
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Assignment deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /attendance:
    post:
      summary: Mark attendance
      description: Records attendance for students in a course (Lecturer only)
      parameters:
        - name: requester_id
          in: query
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - course_id
                - attendance
              properties:
                course_id:
                  type: string
                  format: uuid
                attendance:
                  type: array
                  items:
                    type: object
                    required:
                      - student_id
                      - status
                    properties:
                      student_id:
                        type: string
                        format: uuid
                      status:
                        type: string
                        enum: [PRESENT, ABSENT, EXCUSED]
      responses:
        '200':
          description: Attendance recorded successfully
          content:
            application/json:
              schema:
                type

components:
  securitySchemes:
    RequesterAuth:
      type: apiKey
      in: query
      name: requester_id
      description: UUID of the requesting user

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string
          format: email
        role:
          type: string
          enum: [ADMIN, LECTURER, STUDENT]
        createdAt:
          type: string
          format: date-time

    Course:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        lecturer_id:
          type: string
          format: uuid
        lecturer_name:
          type: string
        created_at:
          type: string
          format: date-time

    Assignment:
      type: object
      properties:
        id:
          type: string
          format: uuid
        course_id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        due_date:
          type: string
          format: date-time

    Attendance:
      type: object
      properties:
        id:
          type: string
          format: uuid
        student_id:
          type: string
          format: uuid
        student_name:
          type: string
        course_id:
          type: string
          format: uuid
        course_name:
          type: string
        date:
          type: string
          format: date-time
        status:
          type: string
          enum: [PRESENT, ABSENT, EXCUSED]

    Error:
      type: object
      properties:
        error:
          type: string

    Success:
      type: object
      properties:
        message:
          type: string

security:
  - RequesterAuth: []