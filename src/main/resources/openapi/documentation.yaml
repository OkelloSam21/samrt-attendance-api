openapi: 3.0.0
info:
  title: Smart attendance api
  description: API for managing educational resources including users, course-assignments and attendance
  version: 0.0.1

servers:
  - url: http://localhost:8080
    description: Default server

paths:
  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login a user and generate access and refresh tokens
      description: >
        Performs authentication for a user with the provided email and password.  
        Upon success, generates and returns a pair of tokens: access token and refresh token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: User's email address
                  example: user@example.com
                password:
                  type: string
                  format: password
                  description: User's password
                  example: "mypassword123"
      responses:
        "200":
          description: Access and refresh tokens generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    description: The JWT access token for authenticating further requests
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhbGciOiJIUzIx...
                  refreshToken:
                    type: string
                    description: The JWT refresh token for generating new access tokens
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2OTM0...
        "401":
          description: Unauthorized - Invalid credentials (email or password)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid email or password

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh access and refresh tokens
      description: >
        Exchanges a valid refresh token for a new set of access and refresh tokens.  
        The refresh token must still be valid.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  description: The JWT refresh token
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsdWlkIjoiMTIz...
      responses:
        "200":
          description: New access and refresh tokens generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    description: The new JWT access token
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhbGciOiJIUzIx...
                  refreshToken:
                    type: string
                    description: The new JWT refresh token
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2OTM1...
        "401":
          description: Unauthorized - Invalid or expired refresh token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid refresh token

  /auth/signup/admin:
    post:
      tags:
        - Authentication
      summary: Register a new admin user
      description: Creates a new user with admin role in the system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminSignUpRequest'
      responses:
        "201":
          description: Admin signed up successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Admin signed up successfully
        "400":
          description: Bad Request - Invalid data provided
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid role Role must be ADMIN for this endpoint
        "409":
          description: Conflict - Email already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Email already exists

  /auth/signup/student:
    post:
      tags:
        - Authentication
      summary: Register a new student user
      description: Creates a new user with student role in the system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StudentSignUpRequest'
      responses:
        "201":
          description: Student signed up successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Student signed up successfully
        "400":
          description: Bad Request - Invalid data provided
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid role Role must be STUDENT for this endpoint
        "409":
          description: Conflict - Email or registration number already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Email already exists

  /auth/signup/lecturer:
    post:
      tags:
        - Authentication
      summary: Register a new lecturer user
      description: Creates a new user with lecturer role in the system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LecturerSignUpRequest'
      responses:
        "201":
          description: Lecturer signed up successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Lecturer signed up successfully
        "400":
          description: Bad Request - Invalid data provided
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid role Role must be LECTURER for this endpoint
        "409":
          description: Conflict - Email or employee role number already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Email already exists

  /users:
    get:
      tags:
        - Users
      summary: Get all users
      description: Retrieves a list of all users in the system. Admin access only.
      security:
        - bearerAuth: [ ]
      responses:
        "200":
          description: List of users retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                      description: The unique identifier of the user
                      example: "123e4567-e89b-12d3-a456-426614174000"
                    email:
                      type: string
                      format: email
                      description: Email address of the user
                      example: user@example.com
                    role:
                      type: string
                      enum: [ ADMIN, STUDENT, LECTURER ]
                      description: Role of the user
                      example: ADMIN
        "401":
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Authorization token is required
        "403":
          description: Forbidden - Insufficient permissions
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Insufficient permissions

    post:
      tags:
        - Users
      summary: Create a new user
      description: Creates a new user in the system. Admin access only.
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User created successfully
        "400":
          description: Bad Request - Invalid data provided
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid user data
        "401":
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Authorization token is required
        "403":
          description: Forbidden - Insufficient permissions
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Insufficient permissions

  /users/{id}:
    get:
      tags:
        - Users
      summary: Get a specific user
      description: Retrieves a specific user by their ID.
      parameters:
        - name: id
          in: path
          required: true
          description: UUID of the user to retrieve
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: User retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    description: The unique identifier of the user
                    example: "123e4567-e89b-12d3-a456-426614174000"
                  name:
                    type: string
                    description: Full name of the user
                    example: John Doe
                  email:
                    type: string
                    format: email
                    description: Email address of the user
                    example: user@example.com
                  role:
                    type: string
                    enum: [ ADMIN, STUDENT, LECTURER ]
                    description: Role of the user
                    example: STUDENT
                  regNo:
                    type: string
                    description: Registration number (for students)
                    example: "S123456"
                    nullable: true
                  employeeRoleNo:
                    type: string
                    description: Employee role number (for lecturers)
                    example: "L789012"
                    nullable: true
        "400":
          description: Bad Request - Invalid user ID format
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid user ID
        "404":
          description: Not Found - User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: User not found

    delete:
      tags:
        - Users
      summary: Delete a user
      description: Deletes a specific user by their ID. Admin access only.
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          description: UUID of the user to delete
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User deleted successfully
        "400":
          description: Bad Request - Invalid user ID format
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid user ID
        "401":
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Authorization token is required
        "403":
          description: Forbidden - Insufficient permissions
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Insufficient permissions
        "404":
          description: Not Found - User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: User not found

  /courses:
    post:
      tags:
        - Courses
      summary: Create a new course
      description: Creates a new course in the system. Accessible by Lecturers and Admins only.
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CourseRequest'
      responses:
        "201":
          description: Course created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Course created successfully
                  courseId:
                    type: string
                    format: uuid
                    example: "123e4567-e89b-12d3-a456-426614174000"
        "400":
          description: Bad Request - Invalid data provided
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Course name is required
        "401":
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Authorization token is required
        "403":
          description: Forbidden - Insufficient permissions
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Only lecturers and admins can create courses

    get:
      tags:
        - Courses
      summary: Get all courses
      description: Retrieves a list of all courses in the system. Accessible by Students, Lecturers, and Admins.
      security:
        - bearerAuth: [ ]
      responses:
        "200":
          description: List of courses retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CourseResponse'
        "401":
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Authorization token is required
        "403":
          description: Forbidden - Insufficient permissions
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Insufficient permissions

  /courses/{id}:
    get:
      tags:
        - Courses
      summary: Get a specific course
      description: Retrieves a specific course by its ID. Accessible by Students, Lecturers, and Admins.
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          description: UUID of the course to retrieve
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Course retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseResponse'
        "400":
          description: Bad Request - Invalid course ID format
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Course ID is required
        "401":
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Authorization token is required
        "404":
          description: Not Found - Course not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Course not found

    put:
      tags:
        - Courses
      summary: Update a course
      description: Updates a specific course by its ID. Accessible by the Lecturer who owns the course and Admins.
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          description: UUID of the course to update
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CourseRequest'
      responses:
        "200":
          description: Course updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Course updated successfully
        "400":
          description: Bad Request - Invalid data provided
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Course name is required
        "401":
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Authorization token is required
        "403":
          description: Forbidden - Not authorized to update this course
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Not authorized to update this course
        "404":
          description: Not Found - Course not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Course not found

    delete:
      tags:
        - Courses
      summary: Delete a course
      description: Deletes a specific course by its ID. Admin access only.
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          description: UUID of the course to delete
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Course deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Course deleted successfully
        "400":
          description: Bad Request - Invalid course ID format
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Course ID is required
        "401":
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Authorization token is required
        "403":
          description: Forbidden - Insufficient permissions
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Only admins can delete courses
        "404":
          description: Not Found - Course not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Course not found


components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the user
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          description: Full name of the user
          example: John Doe
        email:
          type: string
          format: email
          description: Email address of the user
          example: user@example.com
        role:
          type: string
          enum: [ ADMIN, STUDENT, LECTURER ]
          description: Role of the user in the system
          example: STUDENT
        regNo:
          type: string
          description: Registration number for students (null for other roles)
          example: "S123456"
          nullable: true
        employeeRoleNo:
          type: string
          description: Employee role number for lecturers (null for other roles)
          example: "L789012"
          nullable: true
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the user was created
          example: "2023-10-05T14:48:00.000Z"
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the user was last updated
          example: "2023-10-10T14:48:00.000Z"

    AdminSignUpRequest:
      type: object
      required:
        - name
        - email
        - password
        - role
      properties:
        name:
          type: string
          description: Full name of the admin
          example: Admin User
        email:
          type: string
          format: email
          description: Email address of the admin
          example: admin@example.com
        password:
          type: string
          format: password
          description: Password for the admin account
          example: "SecurePassword123"
        role:
          type: string
          enum: [ ADMIN ]
          description: Role must be ADMIN for this endpoint
          example: ADMIN

    StudentSignUpRequest:
      type: object
      required:
        - name
        - email
        - password
        - role
        - regNo
      properties:
        name:
          type: string
          description: Full name of the student
          example: Student User
        email:
          type: string
          format: email
          description: Email address of the student
          example: student@example.com
        password:
          type: string
          format: password
          description: Password for the student account
          example: "SecurePassword123"
        role:
          type: string
          enum: [ STUDENT ]
          description: Role must be STUDENT for this endpoint
          example: STUDENT
        regNo:
          type: string
          description: Registration number for the student
          example: "S123456"

    LecturerSignUpRequest:
      type: object
      required:
        - name
        - email
        - password
        - role
        - employeeRoleNo
      properties:
        name:
          type: string
          description: Full name of the lecturer
          example: Lecturer User
        email:
          type: string
          format: email
          description: Email address of the lecturer
          example: lecturer@example.com
        password:
          type: string
          format: password
          description: Password for the lecturer account
          example: "SecurePassword123"
        role:
          type: string
          enum: [ LECTURER ]
          description: Role must be LECTURER for this endpoint
          example: LECTURER
        employeeRoleNo:
          type: string
          description: Employee role number for the lecturer
          example: "L789012"

    CreateUserRequest:
      type: object
      required:
        - email
        - password
        - role
      properties:
        email:
          type: string
          format: email
          description: Email address for the new user
          example: newuser@example.com
        password:
          type: string
          format: password
          description: Password for the new user
          example: "SecurePassword123"
        role:
          type: string
          enum: [ ADMIN, STUDENT, LECTURER ]
          description: Role for the new user
          example: STUDENT

    CourseRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Name of the course
          example: "KUC111"

    CourseResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the course
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          description: Name of the course
          example: "KUC111"
        lecturerId:
          type: string
          format: uuid
          description: ID of the lecturer who created the course
          example: "123e4567-e89b-12d3-a456-426614174000"
        lecturerName:
          type: string
          description: Name of the lecturer who created the course
          example: "John Doe"
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the course was created
          example: "2023-10-05T14:48:00.000Z"




  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token authentication

security:
  - bearerAuth: [ ]


tags:
  - name: Authentication
    description: Endpoints for user authentication and registration
  - name: Users
    description: Endpoints for managing users
  - name: Courses
    description: Endpoint for managing courses